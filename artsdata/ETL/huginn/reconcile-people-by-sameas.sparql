PREFIX schema: <http://schema.org/>
insert {
    graph ?g {
        ?p  schema:sameAs  ?linked_adid
    }
}
where {
    {
        select ?p ?g where {
            values ?g {
                  <graph_name_placeholder>
            }
            graph ?g {
                ?p a schema:Person .
                OPTIONAL {
                    ?p schema:sameAs ?adid .
                    filter(contains(str(?adid),"http://kg.artsdata.ca/resource/K"))
                }
                filter (!bound(?adid))
            }
        }
    }
    service <http://db.artsdata.ca/repositories/artsdata> 
    {
        ?p a schema:Person .
        ?linked_adid a schema:Person .
        {
            ?linked_adid schema:sameAs ?p
        }
        UNION {
             ?p schema:sameAs ?linked_adid
        }
        filter(contains(str(?linked_adid),"http://kg.artsdata.ca/resource/K"))
        filter(?p != ?linked_adid)
    }
}
# This SPARQL can be run from any graph repository (i.e. raw)
# This SPARQL reconciles people using schema:sameAs in both directions
# Inserts the Artsdata ID into the graph using schema:sameAs.
# TODO: ?p schema:sameAs*/^schema:sameAs* ?linked_adid would be nice in either direction but is too slow.
# The existing entities that already have an ADID are excluded
# Forwards: ?p schema:sameAs ?linked_adid captures the current links in the live graph (before it gets replaced)
# Backwards: ?linked_adid schema:sameAs ?p captures the links in the minted graphs
# Note: Adids from different minted sources can be simply added to the graph, but it would be good to also add the link to the other minted graphs.
