PREFIX schema: <http://schema.org/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

select   ?uda_id ?first_name ?last_name  ?full_name  
		(GROUP_CONCAT(?occ_q;  SEPARATOR=",") AS ?occ_qs)  
		(GROUP_CONCAT(?voice_q;SEPARATOR=",") AS ?voice_qs) 
		(GROUP_CONCAT( ?fow_q; SEPARATOR=",") AS ?fow_qs)  
where {
    ?s a schema:Person ;
       foaf:firstName ?first_name ;
       foaf:lastName ?last_name ;
       rdfs:label ?full_name ;
       schema:memberOf <http://uda.ca/Membre> ; # Only upload people that are full members
       schema:hasOccupation/skos:broader* ?occ .
    ?occ skos:broader*/skos:closeMatch ?occ_mappings .
    filter(contains(str(?occ_mappings),"Profession"))
    OPTIONAL {
        ?occ skos:closeMatch ?voice_mappings .
        filter(contains(str(?voice_mappings),"VoiceType")) 
    }
    OPTIONAL {
        ?occ skos:closeMatch ?fow_mappings .
        filter(contains(str(?fow_mappings),"FieldOfWork")) 
    }
    bind(strafter(str(?occ_mappings),"WikidataConcept-Profession") as ?occ_q )
    bind(strafter(str(?voice_mappings),"WikidataConcept-VoiceType") as ?voice_q )
    bind(strafter(str(?fow_mappings),"WikidataConcept-FieldOfWork") as ?fow_q )
    bind(strafter(str(?s),"/utilisateurs/")   as ?uda_id)
}
group by ?s ?uda_id ?first_name ?last_name  ?full_name